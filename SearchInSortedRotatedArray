There is an integer array nums sorted in ascending order (with distinct values).

Prior to being passed to your function, nums is rotated at an unknown pivot index k (0 <= k < nums.length) such that the resulting array is [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]] (0-indexed). For example, [0,1,2,4,5,6,7] might be rotated at pivot index 3 and become [4,5,6,7,0,1,2].

Given the array nums after the rotation and an integer target, return the index of target if it is in nums, or -1 if it is not in nums.

You must write an algorithm with O(log n) runtime complexity.

SOLUTION:

class Solution {
    public int search(int[] nums, int target) {
        int n = nums.length;
        int pivot = findPivot(nums, 0, n-1);
        System.out.println(pivot);
        if(pivot == -1)
           return binarySearch(nums, 0,n-1, target);
        if(nums[pivot] == target )
            return pivot;
        else if(nums[0] > target)
            return binarySearch(nums, pivot+1, n-1, target);
        else
            return binarySearch(nums, 0, pivot-1, target);
            
    }
    
    public int binarySearch(int[] nums, int lo, int hi, int target){
        while(lo <= hi){
            int mid = hi - (hi-lo)/2;
            if(nums[mid] == target)
                return mid;
            if(nums[mid] > target)
                hi = mid-1;
            else
                lo = mid+1;
        }
        return -1;
    }
    
    public int findPivot(int[] nums ,int lo, int hi){
        if(lo > hi)
            return -1;
        if(lo==hi)
            return lo;
        
        while(lo <=hi){
            int mid = hi - (hi-lo)/2;
            if(mid < hi &&  nums[mid] > nums[mid+1]){
                return mid;
            }
            if(mid > lo &&  nums[mid] < nums[mid-1])
                return mid-1;
            if(nums[mid] > nums[lo])
            {
                lo = mid+1;
            }
            else{
                hi = mid-1;
            }
        }
        return -1;
        
    }
}
