Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

SOLUTION:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> result = new ArrayList<>();
        for(int i=0;i<=height(root);i++){
            result.add(levelOrder(root, i, i, new ArrayList<>()));
        }
        return result;
    }
    
    
    public List<Integer> levelOrder(TreeNode root, int level, int i, List<Integer> result){
        if(root == null || level<0)
            return new ArrayList<>();
        if(level == 0){
            result.add(root.val);
        }
        if(i%2 ==0){
            levelOrder(root.left, level-1, i, result);
             levelOrder(root.right, level-1, i, result);

        }
        else{
            levelOrder(root.right, level-1, i, result);
             levelOrder(root.left, level-1, i,  result); 
        }
       
        return result;
    }
    
    public int height(TreeNode root){
        if(root == null)
            return -1;
        return 1 + Math.max(height(root.left), height(root.right));
    }
}
