There are n cities. Some of them are connected, while some are not. If city a is connected directly with city b, and city b is connected directly with city c, then city a is connected indirectly with city c.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an n x n matrix isConnected where isConnected[i][j] = 1 if the ith city and the jth city are directly connected, and isConnected[i][j] = 0 otherwise.

Return the total number of provinces.

 


SOLUTION:

class Solution {
    public int findCircleNum(int[][] isConnected) {
        int m = isConnected.length;
        int n = isConnected[0].length;
        return findCircleNumUtil(isConnected, m , n);
    }
    
    public int findCircleNumUtil(int[][] isConnected, int m, int n){
        boolean[] visited = new boolean[m];
        Queue<Integer> q = new ArrayBlockingQueue<Integer>(m*n);
        int count =0;
        int i = 0;
        while(i < m){
            if(visited[i] ==true){
                i++;
                continue;
            }
            count++;
            q.add(i);
            while(q.size()>0){
                int index = q.poll();
                visited[index]=true;
                for(int j=0;j<n;j++){
                if(visited[j] ==false && isConnected[index][j] ==1){
                    q.add(j);
                }
            }
        }
            
            i++;
        }
        return count;
    }
}
