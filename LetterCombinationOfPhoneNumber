Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

SOLUTION:

class Solution {
    public List<String> letterCombinations(String digits) {
        Map<Character, String> map = new HashMap<>();
        map.put('2', "abc");
        map.put('3', "def");
        map.put('4', "ghi");
        map.put('5', "jkl");
        map.put('6', "mno");
        map.put('7', "pqrs");
        map.put('8', "tuv");
        map.put('9', "wxyz");
        return letterCombinationsUtil(digits, digits.length(), map);
    }
    
    public List<String> letterCombinationsUtil(String digits, int n, Map<Character, String> map){
        if(n==0)
            return new ArrayList<String>();
        List<String> result = letterCombinationsUtil(digits, n-1, map);
        String current = map.get(digits.charAt(n-1));
        int size = result.size();
        for(int i=0;i<size;i++){
            int j=0;
            for( j=0;j<current.length()-1;j++){
                result.add(result.get(i)+ current.charAt(j));
            }
            result.set(i, result.get(i)+ current.charAt(j));
        }
        if(size ==0){
            for(int i=0;i<current.length();i++){
                result.add(String.valueOf(current.charAt(i)));
            }
        }
        return result;
        
    }
}
