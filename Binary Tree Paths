Given the root of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children. 

SOLUTION:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {
        if(root == null)
            return null;
        List<String> path = new ArrayList<>();
        // path.add(String.valueOf(root.val));
        List<String> result = new ArrayList<>();
        binaryTreePathsUtil(root, path, result);
        return result;
    }
    
    public void binaryTreePathsUtil(TreeNode root,List<String> path, List<String> result){
        if(root == null)
            return;
        if(root.left == null && root.right == null){
            path.add(String.valueOf(root.val));
            String s = String.join("->", path);
            path.remove(path.size()-1);
            result.add(s);
        }
        path.add(String.valueOf(root.val));
        binaryTreePathsUtil(root.left, path, result);
        binaryTreePathsUtil(root.right, path, result);
        path.remove(path.size()-1);
        
    }
}
