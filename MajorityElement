Given an array nums of size n, return the majority element.

The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.


SOLUTION:

Using BST:

class Solution {
    public class TreeNode{
        private int val;
        private int freq;
        private TreeNode left;
        private TreeNode right;
    }
    public int majorityElement(int[] nums) {
        int n = nums.length;
        TreeNode root = new TreeNode();
        root.val = nums[0];
        root.freq = 1;
        for(int i=1;i<n;i++)
            insertToBST(root, nums[i],n);
        return getMajority(root, n);
        
    }
    
    public int getMajority(TreeNode root, int n){
        if(root == null)
            return -1;
       int left = getMajority(root.left, n);
            if(root.freq > n/2)
                return root.val;
       int right = getMajority(root.right, n);
        if(left != -1)
            return left;
        else 
            return right;
        
    }
    
    
    public TreeNode insertToBST(TreeNode root, int k, int n){
        if(root == null){
            root = new TreeNode();
            root.val = k;
            root.freq = 1;
            return root;
        }
            
        if(root.val == k){
            root.freq +=1;
        }
        else if(root.val < k){
          root.left  = insertToBST(root.left, k,n);
        }
        else{
          root.right = insertToBST(root.right, k,n);
        }
        return root;
    }
}

USING MOORE's Voting Algo:

class Solution {
    
    public int majorityElement(int[] nums) {
      return majorityElementUtil(nums);
        
    }
    
    public int majorityElementUtil(int[] nums){
        int maj_index =0;
        int count =1;
        int n = nums.length;
        for(int i=1;i<n;i++){
            if(nums[i] == nums[maj_index])
                count++;
            else
                count--;
            if(count == 0){
                count =1;
                maj_index = i;
            }
        }
        return nums[maj_index];
    }
}
