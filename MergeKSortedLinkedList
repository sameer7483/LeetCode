You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        int k = lists.length;
        return mergeKListsUtil(lists,0, k-1);
    }
    
    public ListNode mergeKListsUtil(ListNode[] lists, int start, int end){
        if(end - start<0)
            return null;
        if(end - start ==0)
            return lists[start];
        if(end - start ==1){
         return mergeTwoLinkedList(lists[start], lists[end]);       
        }
        int mid = (start+end)/2;
        
       ListNode left =  mergeKListsUtil(lists, start, mid);
       ListNode right =  mergeKListsUtil(lists, mid+1, end);
        return  mergeTwoLinkedList(left, right);
        
        
    }
    
    public ListNode mergeTwoLinkedList(ListNode l1, ListNode l2){
        if(l1 == null)
            return l2;
        if(l2 == null)
            return l1;
        ListNode result = new ListNode();        
        ListNode temp = result;
        ListNode temp1 = l1;
        ListNode temp2 = l2;
        
        while(temp1 != null && temp2 != null){
            if(temp1.val > temp2.val){
                temp.next = new ListNode(temp2.val);
                temp2 = temp2.next;
            }
            else{
                temp.next = new ListNode(temp1.val);
                temp1 = temp1.next;
            }
            temp = temp.next;
        }
        
        if(temp1 == null){
            while(temp2 != null){
                temp.next = new ListNode(temp2.val);
                temp2 = temp2.next;
                temp = temp.next;
            }
        }
        else if(temp2 == null){
            while(temp1 != null){
                temp.next = new ListNode(temp1.val);
                temp1 = temp1.next;
                temp = temp.next;
            }
        }
        
        return result.next;
        
    }
}
