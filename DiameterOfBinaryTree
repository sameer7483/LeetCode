Given the root of a binary tree, return the length of the diameter of the tree.

The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the root.

The length of a path between two nodes is represented by the number of edges between them.

SOLUTION:

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int diameterOfBinaryTree(TreeNode root) {
        return diameterOfBinaryTreeUtil(root, 0);
    }
    
    public int diameterOfBinaryTreeUtil(TreeNode root, int maxDiameter){
        if(root == null)
            return 0;
        int diameter=0;
        diameter = height(root.left) + height(root.right);
        maxDiameter = Math.max(maxDiameter, diameter);
        maxDiameter = Math.max(maxDiameter, Math.max(diameterOfBinaryTreeUtil(root.left, maxDiameter), diameterOfBinaryTreeUtil(root.right, maxDiameter)));
        return maxDiameter;   
    }
    
    public int height(TreeNode root){
        if(root == null)
            return 0;
        return 1+Math.max(height(root.left), height(root.right));
    }
}
