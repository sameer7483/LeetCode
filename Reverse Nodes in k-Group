Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

You may not alter the values in the list's nodes, only nodes themselves may be changed.

SOLUTION:

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode reverseKGroup(ListNode head, int k) {
        
        ListNode temp = head;
        int c=1;
        while(c<k && temp != null){
            temp = temp.next;
            c++;
        }
        if(temp == null)
            return head;
        ListNode reversed = reverseKGroup(temp.next, k);
        temp.next = null;
        head = reverseList(head);
        temp = head;
        while(temp.next !=null ){
            System.out.println(temp.val);
             temp = temp.next;
             
        }
           
         temp.next = reversed;
        return head;
        
    }
    
    public ListNode reverseList(ListNode head){
        if(head.next == null)
            return head;
        ListNode last = reverseList(head.next);
        ListNode temp = last;
        while(temp.next != null)
            temp = temp.next;
        temp.next = head;
        head.next = null;
        head = last;
        return head;
            
    }
}
