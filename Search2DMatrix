Write an efficient algorithm that searches for a target value in an m x n integer matrix. The matrix has the following properties:

Integers in each row are sorted in ascending from left to right.
Integers in each column are sorted in ascending from top to bottom.
 
SOLUTION:

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int m = matrix.length;
        int n = matrix[0].length;
        return searchMatrixUtil(matrix, 0 , m-1, 0, n-1, target);
    }
    
    public boolean searchMatrixUtil(int[][] matrix, int lowRow, int highRow, int lowCol, int highCol, int target){
        if(highRow < lowRow || highCol < lowCol)
            return false;
        if(highRow == lowRow && highCol == lowCol && matrix[lowRow][lowCol] != target){
            return false;
        }
            int midRow = (highRow+lowRow)/2;
            int midCol = (highCol+lowCol)/2;
            System.out.println(midRow);
            System.out.println(midCol);
            if(matrix[midRow][midCol] == target)
                return true;
            if(matrix[midRow][midCol] > target){
                return searchMatrixUtil(matrix, lowRow, midRow-1, lowCol, highCol, target) || searchMatrixUtil(matrix, midRow, highRow, lowCol, midCol-1, target);
            }
            else{
              return  searchMatrixUtil(matrix, midRow+1, highRow, lowCol, midCol, target) || searchMatrixUtil(matrix, lowRow, highRow, midCol+1, highCol, target);
            } 
    }
}
