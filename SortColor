Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.


SOLUTION:

1. Using Counting in two Pass

class Solution {
    public void sortColors(int[] nums) {
        int n = nums.length;
        int zero=0;
        int one =0;
        int two =0;
        for(int i=0;i<n;i++){
            if(nums[i]==0)
                zero++;
            else if(nums[i] ==1)
                one++;
            else
                two++;
        }
        int index=0;
        while(index <n){
            if(zero > 0)
            {
                nums[index]=0;
                zero--;
                index++;
            }
            else if(one >0){
                nums[index]=1;
                one--;
                index++;
            }
            else{
                nums[index]=2;
                two--;
                index++;
            }
        }
    }
}

2. Using Dutch Flag partitioning algorithm in one pass

class Solution {
    public void sortColors(int[] nums) {
        int n = nums.length;
        int low=0;
        int mid =0;
        int hi = n-1;
        while(mid<=hi){
            switch (nums[mid]){
                case 0:
                    int temp = nums[low];
                    nums[low] = nums[mid];
                    nums[mid] = temp;
                    low++;
                    mid++;
                    break;
                case 1:
                    mid++;
                    break;
                case 2:
                    int temp2 = nums[hi];
                    nums[hi] = nums[mid];
                    nums[mid] = temp2;
                    hi--;
            }
            
        }
           
    }
    
}
